<body>
	<img id="top" src="top.png" alt="">
	<div id="form_container">
		<h1><a>Beautiful Trees</a></h1>
		<form id="form_89901" class="appnitro">
		<div class="form_description">
			<h2>Beautiful Trees</h2>
            <p>Algorithmic trees in Canvas</p>
		</div>

            <canvas style="border:1px solid #c0c0c0;" id="canvas"></canvas>
            <div style="float:left;">
			<li class="buttons">
				<input id="redraw" class="button_text" type="button" value="Redraw" />
                <input id="saveImage" class="button_text" type="button" value="Save Image" />
            </li>
            </div>
            <div style="float:right; margin-right: 20px;">
            <label class="description" for="element_1">Options</label>
            <span>
                <input id="auto" name="auto" class="element checkbox" type="checkbox" />
                <label class="choice">Auto Redraw</label>
                <input id="noLeaves" name="noLeaves" class="element checkbox" type="checkbox" CHECKED />
                <label class="choice">Draw leaves</label>
                <label class="description" for="element_1">Tree Spread</label>
                <div>
                <select class="element select large" id="spread" name="spread">
                    <option value="0.3" >0.3</option>
                    <option value="0.4" >0.4</option>
                    <option value="0.5" >0.5</option>
                    <option value="0.6" selected="selected">0.6</option>
                    <option value="0.7" >0.7</option>
                    <option value="0.8" >0.8</option>
                    <option value="0.9" >0.9</option>
                </select>
                </div>
                <div id="ltype">
                <label class="description" for="element_1">Leaves Type</label>
                <select class="element select large" id="leaveType" name="leaveType">
                    <option value="1">Small</option>
                    <option value="2"  selected="selected">Medium</option>
                    <option value="3">Large</option>
                    <option value="4">Thin</option>
                </select>
                </div>
            </span>
            </div>
		</form>
		<div id="footer">
                <iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.codediesel.com%2Fdemos%2Fcanvas%2Ftree%2Ftree1.html&amp;layout=box_count&amp;show_faces=true&amp;width=450&amp;action=like&amp;font=arial&amp;colorscheme=light&amp;height=65" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:450px; height:65px;" allowTransparency="true"></iframe>
		</div>
	</div>
    <script type="application/javascript">

    var height = 500;
    var width = 600;
    var intervalId = 0;


    function init() {

        var canvas = document.getElementById("canvas");

        if(canvas.getContext("2d")) {

        document.getElementById("redraw").onclick = function() {
            drawTree();
        }

        document.getElementById("saveImage").onclick = function() {
            window.location = canvas.toDataURL("image/png");
        }

        document.getElementById("noLeaves").onclick = function() {
            if(this.checked == false)
                document.getElementById('leaveType').disabled = true;
            else
                document.getElementById('leaveType').disabled = false;
        }

        document.getElementById("auto").onclick = function() {
            if(this.checked == false)
                clearInterval(intervalId);
            else
                intervalId = setInterval ("drawTree()", 1000 );
        }

        canvas.height = height;
        canvas.width = width;
        ctx = canvas.getContext("2d");
        drawTree();

        } else {
            document.getElementById('form_container').innerHTML = "Your browser doen't support Canvas!";
        }
    };

    function drawTree() {
        var drawLeaves = document.getElementById('noLeaves').checked;
        var treeSpread = document.getElementById('spread').value;
        var temp  = document.getElementById('leaveType').value;
        var leaveType = '';

        switch(temp) {
            case '1': leaveType = tree.SMALL_LEAVES;
                    break;
            case '2': leaveType = tree.MEDIUM_LEAVES;
                    break;
            case '3': leaveType = tree.BIG_LEAVES;
                    break;
            case '4': leaveType = tree.THIN_LEAVES;
                    break;
            default:leaveType = tree.MEDIUM_LEAVES;
        }

        ctx.save();
        tree.draw(ctx,height,width,treeSpread,drawLeaves,leaveType);
        ctx.restore();
    }


init();
  </script>
	</body>






<script>
console.log("hello from fractal trees")
/*

    Algorithmic Tree - 1.0.0
    drawing trees algorithmically on the HTML5 canvas

    License       : GPL
    Developer     : Sameer Borate: http://codediesel.com
    Web Site      : http://codediesel.com

 */

var tree = {

    canvas:     '',
    ctx:        '',
    height:     0,
    width:      0,
    spread:     0.6,
    drawLeaves: true,
    leavesColor:'',
    leaveType:  this.MEDIUM_LEAVES,

    MAX_BRANCH_WIDTH:   20,
    SMALL_LEAVES:       10,
    MEDIUM_LEAVES:      200,
    BIG_LEAVES:         500,
    THIN_LEAVES:        900,

    /**
     * @member draw
     * tree.draw() initializes tthe tree structure
     *
     * @param {object} ctx      the canvas context
     * @param {integer} h       height of the canvas
     * @param {integer} w       width of the canvas
     * @param {float} spread    how much the tree branches are spread
     *                          Ranges from 0.3 - 1.
     * @param {boolean} leaves  draw leaves if set to true
     *
     */
    draw : function(ctx, h, w, spread, leaves, leaveType) {
        // Set how much the tree branches are spread
        if(spread >= 0.3 && spread <= 1) {
            this.spread = spread;
        }

        if(leaves === true || leaves === false) {
            this.drawLeaves = leaves;
        }

        if(leaveType == this.SMALL_LEAVES ||
           leaveType == this.MEDIUM_LEAVES ||
           leaveType == this.BIG_LEAVES ||
           leaveType == this.THIN_LEAVES) {
            this.leaveType = leaveType;
        }

        this.ctx = ctx;
        this.height = h;
        this.width = w;
        this.ctx.clearRect(0,0,this.width,this.height);
        // Center the tree in the window
        this.ctx.translate(this.width/2,this.height);
        // Set the leaves to a random color
        this.leavesColor = '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6);
        // Set branch thickness
        this.ctx.lineWidth = 1 + (Math.random() * this.MAX_BRANCH_WIDTH);
        this.ctx.lineJoin = 'round';

        this.branch(0);
    },

    /**
     * @member branch
     * tree.branch() main tree drawing function
     *
     * @param {String} depth the maimum depth the tree can branch,
     *        Keep this value near 12, larger value take linger to render.
     *
     */
    branch : function(depth) {
        if (depth < 12)
        {
            this.ctx.beginPath();
            this.ctx.moveTo(0,0); // Se centra el arbol ya que se habia transladado el punto de inicio
            this.ctx.lineTo(0,-(this.height)/10); // La primera branch, este es el tronco principal
            this.ctx.stroke(); // No se, en p5js esto se refiere darle color a la linea

            this.ctx.translate(0,-this.height/10); // El punto inicial de la proxima rama inicia en el punto final del tronco
            // Random integer from -0.1 to 0.1
            var randomN = -(Math.random() * 0.2) + 0.1; // Cada vez se crea un numero aleatorio desde -1 a 1

            this.ctx.rotate(randomN); // Rotacion de la rama

            // Aqui se dibuja el arbol, recuerde que el spread se refiere a lo que se extienden las ramas, a valores mas altos
            // arboles mas pequeÃ±os
            if ((Math.random() * 1) < this.spread)
            {
                // Draw the left branches
                this.ctx.rotate(-0.3); // Angulo negativo va hacia la izquierda
                this.ctx.scale(0.7,0.7);
                this.ctx.save(); // Este seria el push en el p5js
                this.branch(depth + 1); //Se suma 1, recuerde que este valor va hasta 12
                // Draw the right branches
                this.ctx.restore(); // Este seria el pop en el p5js
                this.ctx.rotate(0.6); // Angulo positivo, ramas hacia la derecha
                this.ctx.save(); // Push
                this.branch(depth + 1); // Se vuelve a llamar el metodo de la branch con 1 mas
                this.ctx.restore(); // Pop
            }
            else
            {
                this.branch(depth);
            }

        }
        else
        {
            // Now that we have done drawing branches, draw the leaves
            if(this.drawLeaves) {
                var lengthFactor = 200;
                if(this.leaveType === this.THIN_LEAVES) {
                    lengthFactor = 10;
                }
                this.ctx.fillStyle = this.leavesColor;
                this.ctx.fillRect(0, 0, this.leaveType, lengthFactor); // fillRect dibuja un rectangulo
                this.ctx.stroke();
            }
        }
    }
};


</script>
