<style>
canvas {
  border-radius: 12px;
}
</style>

<script>

function setup() {
  createCanvas(600, 500);
  noLoop();
  backgroundGradient();
  drawSun();
  let  defaultXoff = random(0, 1000);
  backgroundMountains(56, 250, 0.015, [28,56,99],defaultXoff);
  backgroundMountains(135, 250, 0.015, [28,56,99],defaultXoff);
  backgroundMountains(50, 110, 0.006,[65,66,2],defaultXoff);
  backgroundMountains(15, 65, 0.1,[236,59,6],defaultXoff);
  backgroundMountains(15, 45, 0.8,[0,255,0],defaultXoff);
}

function backgroundGradient() {
  for (let y = 0; y < height; y += 0.5) {
    n = map(y, 0, height, 0, 1);
    let newc = lerpColor(color(14, 24, 95), color(185, 255, 248), n);
    stroke(newc);
    line(0, y, width, y + 1);
  }
}

function drawSun() {
  translate(0,0);
  noStroke();
  fill(230, 230, 230, 50);
  ellipse(200, 130, 170, 170);
  fill(230, 230, 230, 150);
  ellipse(200, 130, 130, 130);
  fill(230, 230, 230, 200);
  ellipse(200, 130, 110, 110);
  fill(230, 230, 230);
  ellipse(200, 130, 70, 70);
}

function backgroundMountains(hMin, hMax, inc, col, defaultXoff) {
  var xoff = defaultXoff
  let y;

  noStroke();
  squareColor = color(col);
  squareColor.setAlpha(128);
  fill(squareColor);
  // fill(color(col));

  beginShape();
  for (let x = 0; x < width; x++) {
    y = map(noise(xoff), 0, 1, height - hMin, height - hMax);
    vertex(x, y);
    xoff += inc;
  }
  vertex(width, height);
  vertex(0, height);
  endShape();
}


function draw(){
  stroke(28, 10, 0);

  strokeWeight(15);
  translate(width/2,height-2);
  branch(0);

}

function branch(depth){
  if (depth < 11) {
    line(0,0,0,-height/10); // draw a line going up
    {
      translate(0,-height/10); // move the space upwards
      rotate(random(-0.2,0.2));  // random wiggle - ramas mas deformes a valoes mas altos

      if (random(1.0) < 0.7){ // branching
        rotate(0.3); // rotate to the right 0.25 arbolito en copita
        scale(0.8); // scale down

        push(); // now save the transform state
        branch(depth + 1); // start a new branch!
        pop(); // go back to saved state

        rotate(-0.6); // rotate back to the left

        push(); // save state
        branch(depth + 1);   // start a second new branch
        pop(); // back to saved state
     }
      else { // no branch - continue at the same depth
        branch(depth);
      }
    }
  } else
  {
    let = lengthFactor = 200;

    // let colors = [[246, 246, 201],[186, 209, 194],[79, 160, 149]]
    let col = [[255, 185, 185],[255, 221, 210],[255, 141, 199]]
      // fill(random(188,255), 226, 158, 250)

    let coly = [28, 103, 88]
  squareColor = color(coly);
  squareColor.setAlpha(128);
  fill(squareColor);
    // fill(28, 103, 88)
    // stroke(100, 126, 0)

    // fill(205,83,107)

    // fill(0, 141, 158);
    noStroke();
      bezier(131,225,109,48,291,202,131,225);


    // drawingContext.rect(30, 20, 55, 55, 20, 15, 10, 5);
    // drawingContext.fill();
    // stroke(159,0,63);
    // strokeWeight(35);
    // fill(238,54,126);
    // bezier(131,225,109,560,291,202,131,225);

    // bezier(143,279,0,0,random([200,400]),random([100,181]),143,279);
    // bezier(143,279,0,0,400,18,143,279);
    for (let i = 0; i < 10; i ++) {
      noStroke()
      fill(255, 209, 209)
        drawingContext.shadowBlur = 5;
  drawingContext.shadowColor = color(207, 7, 99);
    ellipse(0, 30, 20, 80);
    rotate(PI/5);

  }



  }
}



</script>
